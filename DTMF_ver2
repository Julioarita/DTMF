 /* DTMF decodificador de ligações*/
 
 /* Definição das labels */
 #define StD    RA0_bit   
 #define led1   RC0_bit  
 #define led2   RC1_bit 

/* Definição de variáveis */
bit control;
char i;
short int numero[4];

/* Definição de funções */

 void ligacao();
 
 
/* Inicialização do Display */
// LCD module connections
sbit LCD_RS at RB1_bit;
sbit LCD_EN at RB2_bit;
sbit LCD_D4 at RB3_bit;
sbit LCD_D5 at RB4_bit;
sbit LCD_D6 at RB5_bit;
sbit LCD_D7 at RB6_bit;

sbit LCD_RS_Direction at TRISB1_bit;
sbit LCD_EN_Direction at TRISB2_bit;
sbit LCD_D4_Direction at TRISB3_bit;
sbit LCD_D5_Direction at TRISB4_bit;
sbit LCD_D6_Direction at TRISB5_bit;
sbit LCD_D7_Direction at TRISB6_bit;



/* Interrupções */
void interrupt (){
    if(INT0IF_bit){    // Houve a interrupção. Sim ou não  
       INT0IF_bit = 0x00;  // Limpa a flag para a próxima interrupção
       control = ~control;
       
       if(control){ 
       led2 = 0x01;}       
       else {
       led2 = 0x00;
       }
       
        for(i=1;i<=4;i++){  // Store RB1:RB4 to 'number' vector
            if(i == 1){
              numero[i] = RB1;
            } else if(i == 2){
              numero[i] = RB2;
            } else if(i == 3){
              numero[i] = RB3;
            } else if(i == 4){
              numero[i] = RB4;
            }
        } // Fim bucle for
        
     //void  ligacao();                
    } 
}    // Fim da interrupção



/* Função principal */
void main() {

CMCON = 0x07; // Desabilita os comparadores  internos

/* Declaração da interrupção */
IPEN_bit = 0x00;     // Desabilita os nives de prioridade
GIE_bit = 0x01;      //  Abilita as interrupções globais
PEIE_bit = 0x00;     // Desabilita as interrupções por periféricos
INT0IE_bit = 0x01;   // Abilita as interrupções externas INT0
INTEDG0_bit = 0x01;  // Configura a interrupção por borda de subida

/* Configuração dos Portos do PIC18F */
TRISB = 0xFF; // Configura o PORTB como entrada digitaL
TRISC = 0xFC; // Configura o PORTB como saida digital
PORTB = 0x00;  //  Inicializa o PORTB em nivel baixo
PORTC = 0xFC;  // Inicializa RC0 e RC1 em nivel baixo

Lcd_Init();
Lcd_Cmd(_LCD_CURSOR_OFF);
Lcd_Cmd(_LCD_CLEAR);

control = 0x00;


/* Ciclo infinito */
while(1){
led1 = 0x01; // Liga o LED1 
Delay_ms(200);
led1 = 0x00; // Desliga o LED1
Delay_ms(200); 
Lcd_Out(4,1,"Hello Parceros");
}// end ciclo infinito
}// end void main
      
      
 int ligacao(int num){
      if(numero[0] == 1 && numero[1] == 0 && numero[2] == 0 && numero[3] == 0){     
      }// end if
 
 }// end ligação     
